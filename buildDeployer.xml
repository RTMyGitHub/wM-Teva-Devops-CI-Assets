<?xml version="1.0"?>

<project default="teva.deployer.startDeployer" basedir="." name="build_Deployer">

	<condition property="isWindows">
		<os family="windows" />
	</condition>

	<condition property="isUnix">
		<os family="unix" />
	</condition>

	<target name="teva.deployer.initWindows" if="isWindows">
		<property name="deployerExecutable" value="Deployer.bat" />
		<property name="deployerAutomatorExecutable" value="projectautomator.bat" />
	</target>

	<target name="teva.deployer.initUnix" if="isUnix">
		<property name="deployerExecutable" value="Deployer.sh" />
		<property name="deployerAutomatorExecutable" value="projectautomatorUnix.sh" />
	</target>


	<target name="teva.deployer.initDeployer" depends="teva.deployer.cleanup, teva.deployer.initWindows, teva.deployer.initUnix">

		<property name="projectName" value="${config.deployer.projectNamePrefix}_${teva.targetEnv}_${teva.projectName}" />
		<property name="projectAutomatorDefinition" location="${config.tmpdir}/${projectName}_PA_template.definition.xml" />

		<log msg="Init build Deployer. Properties: with project name='${projectName}' and repository='${fbrRepoName}'." />
		<log msg="Target Environment='${teva.targetEnv}'" />
		<log msg="Project name='${projectName}'" />
		<log msg="Repository Name='${fbrRepoName}'." />
		<log msg="Repository location='${tevaRepositoryDirectory}'" />
	</target>

	<target name="teva.deployer.createProjectAutomatorTemplate" depends="">
		<property name="groovyScript.CreateProjectAutomatorTemplate" location="resources/ProjectAutomator/CreateProjectAutomatorTemplate.groovy" />
		<log msg="Creating project definition file '${projectAutomatorDefinition}' using environments defined in '${environmentsDefinition}'. Groovy script: '${groovyScript.CreateProjectAutomatorTemplate}'" />
		<log msg="-repoName ${fbrRepoName}"/>
		<groovy src="${groovyScript.CreateProjectAutomatorTemplate}">
			<arg line="-r '${tevaRepositoryDirectory}'" />
			<arg line="-p '${projectName}'" />
			<arg line="-f '${projectAutomatorDefinition}'" />
			<arg line="-t ${teva.targetEnv}" />
			<arg line="-d ${config.deployer.deployerHost}:${config.deployer.deployerPort}" />
			<arg line="-u ${config.deployer.deployerUsername}" />
			<arg line="-s ${config.deployer.deployerPassword}" />
			<arg line="-e '${environmentsDefinition}'" />
			<arg line="-repoName ${fbrRepoName}" />
			<arg line="-splitDeploymentSets ${config.deployer.splitDelpoymentSets}" />
		</groovy>
	</target>

	<target name="teva.deployer.cleanup">
		<delete file="${projectAutomatorDefinition}">
		</delete>
	</target>

	<target name="teva.deployer.startDeployer" depends="teva.deployer.setupDeployer, teva.deployer.extractDeploymentCandidates" description="creates the deployer project and invokes Deployer for execution">

	</target>


	<target name="teva.deployer.setupDeployer" depends="teva.deployer.initDeployer, teva.deployer.createProjectAutomatorTemplate, teva.deployer.execProjectAutomator, teva.deployer.importVarSubs" description="creates the deployer project">

	</target>

	<target name="teva.deployer.execProjectAutomator">
		<path id="path.projectdefinition">
			<pathelement location="${projectAutomatorDefinition}" />
		</path>
		<pathconvert refid="path.projectdefinition" property="path.projectdefinition.file">
		</pathconvert>

		<property name="output" value="${config.deployer.deployerInstallationPath}/logs/CLI.log" />
		<property name="paExec" value="${config.deployer.deployerInstallationPath}/${deployerAutomatorExecutable}"/>
		
		<log msg="Executing ProjectAutomator '${paExec}' with input file '${path.projectdefinition.file}'. Writing output to '${output}'"/>
		
		<exec resultproperty="paResult" failonerror="false" dir="${config.deployer.deployerInstallationPath}" executable="${paExec}" output="${output}">
			<arg value="${path.projectdefinition.file}" />
		</exec>

		<if>
			<not>
				<equals arg1="${paResult}" arg2="0" />
			</not>
			<then>
				<loadfile property="CLI.log" srcFile="${output}" />
				<log msg="Project Automator returned an error. Output of file '${output}'" level="ERROR" />
				<log msg="${CLI.log}" level="ERROR" />
				<fail message="Project Automator returned an error." />
			</then>
		</if>
	</target>


	<condition property="doVarSub">
		<equals arg1="${config.deployer.doVarSub}" arg2="true" />
	</condition>

	<target name="teva.deployer.importVarSubs" depends="teva.deployer.createVarSubs" if="doVarSub" description="the entry point for the varsub implementation">
		<log msg="Looking for varsub files with file suffix '.vs.xml' in directory '${varsubTmpDir}'" />
		<foreach target="teva.deployer.importVarSubDeployer" param="varsubfile.path" inheritall="true" inheritrefs="true">
			<fileset dir="${varsubTmpDir}" casesensitive="yes">
				<include name="**/*.vs.xml" />
			</fileset>
		</foreach>
	</target>

	<target name="teva.deployer.importVarSubDeployer" depends="" if="doVarSub" description="the entry point for the varsub implementation">
		<!-- check if the var sub file contains at least one deployment set, i.e. the varsub is not empty -->
		<xmltask source="${varsubfile.path}">
			<!-- count the child nodes of Root. We do not know if they are name DeploymentSet or DeploementSet --> 
			<copy path="count(/Root/child::node())" property="countDeploementSet" />
		</xmltask>
		<if>
			<and>
				<available file="${varsubfile.path}" type="file" />
				<not>
					<equals arg1="0" arg2="${countDeploementSet}" />
				</not>
			</and>
			<then>
				<property name="deployerReplicateInboundDir" location="${config.deployer.deployerInstallationPath}/../replicate/inbound" />
				<log msg="At least one varsub was created, copy file '${varsubfile.path}' to Deployer replicate inbound dir at '${deployerReplicateInboundDir}'." />
				<copy file="${varsubfile.path}" todir="${deployerReplicateInboundDir}" />
				<basename property="varsubfile.file" file="${varsubfile.path}" />
				<!-- the name of the vs.xml file is also the name of the map for which it should be imported -->
				<propertyregex property="mapName" input="${varsubfile.file}" regexp="(.*)\.vs\.xml" select="\1" casesensitive="false" />

				<log msg="-- Import Varsub parameters: -vsFile ${varsubfile.file}, -map ${mapName}, -project ${projectName}" />
				
				<property name="output" value="${config.deployer.deployerInstallationPath}/logs/CLI.log" />
				<exec executable="${config.deployer.deployerInstallationPath}/${deployerExecutable}" dir="${config.deployer.deployerInstallationPath}" output="${output}" resultproperty="importVarsubReturnCode" failonerror="false">
					<arg value="--import" />
					<arg value="-varsub" />
					<arg line="-vsFile '${varsubfile.file}'" />
					<arg line="-map ${mapName}" />
					<arg line="-project ${projectName}" />
					<arg line="-host ${config.deployer.deployerHost}" />
					<arg line="-port ${config.deployer.deployerPort}" />
					<arg line="-user ${config.deployer.deployerUsername}" />
					<arg line="-pwd ${config.deployer.deployerPassword}" />
				</exec>
				<log msg="Importing the varsub file '${varsubfile.file}' restulted in return code ${importVarsubReturnCode}. See logs at '${output}'." />
				<if>
					<equals arg1="${importVarsubReturnCode}" arg2="8" />
					<then>
						<loadfile property="CLI.log" srcFile="${output}" />
						<log msg="Deployer varsub import returned an error. Output of file '${output}'" level="ERROR" />
						<log msg="${CLI.log}" level="ERROR" />
						<fail message="Error when importing the varsub file ${varsubfile.file}." />
					</then>
				</if>
			</then>
			<else>
				<log msg="-- no variable substitution will be used." />
			</else>
		</if>
	</target>

	<target name="teva.deployer.extractDeploymentCandidates">
		<log msg="Extracting deployment candidates from project automator template '${projectAutomatorDefinition}'" />
		<path id="path.projectdefinition">
			<pathelement location="${projectAutomatorDefinition}" />
		</path>
		<pathconvert refid="path.projectdefinition" property="path.projectdefinition.file">
		</pathconvert>
		<log msg="Extracting deployment candidates from project automator template '${path.projectdefinition.file}'" />
		<xmltask source="${path.projectdefinition.file}">
			<call path="//DeploymentCandidate" target="teva.deployer.deployDeployer" buffer="candidates">
				<param name="deploymentCandidate" path="@name" />
			</call>
		</xmltask>
	</target>

	<target name="teva.deployer.deployDeployer">
		<log msg="-- Invoking Deployer executable '${config.deployer.deployerInstallationPath}/${deployerExecutable}' with parameters: -project ${projectName}, -dc myDeployment, -host ${config.deployer.deployerHost}, -port ${config.deployer.deployerPort}, -user ${config.deployer.deployerUsername}, -dc ${deploymentCandidate}" />

		<property name="output" value="${config.deployer.deployerInstallationPath}/logs/CLI.log" />
		<exec resultproperty="deployerResult" executable="${config.deployer.deployerInstallationPath}/${deployerExecutable}" dir="${config.deployer.deployerInstallationPath}" failonerror="false" output="${output}">
			<arg value="--deploy" />
			<arg line="-project ${projectName}" />
			<arg line="-dc ${deploymentCandidate}" />
			<arg line="-host ${config.deployer.deployerHost}" />
			<arg line="-port ${config.deployer.deployerPort}" />
			<arg line="-user ${config.deployer.deployerUsername}" />
			<arg line="-pwd ${config.deployer.deployerPassword}" />
			<arg value="-force" />
		</exec>
		<if>
			<and>
				<isset property="deployerResult" />
				<equals arg1="${deployerResult}" arg2="8" />
			</and>
			<then>
				<log msg="Deployer returned an error result code: '${deployerResult}'. Output of file '${output}':" level="ERROR" />
				<loadfile property="CLI.log" srcFile="${output}" />
				<log msg="${CLI.log}" level="ERROR" />
				<fail message="Deployer returned an error result code: '${deployerResult}'." />
			</then>
			<else>
				<log msg="Deployer succeeded with result code '${deployerResult}'." level="INFO" />
			</else>
		</if>
	</target>


	<target name="teva.deployer.createVarSubs" if="doVarSub">
		<log msg="Creating variable substitution for target environment '${teva.targetEnv}'" />

		<!-- store temp varsub files in a special vs tmp dir -->
		<property name="varsubTmpDir" location="${config.tmpdir}/vs/${teva.targetEnv}/${fbrRepoName}" />
		<antcall target="common.create_dir">
			<param name="overwrite" value="false" />
			<param name="dir" value="${varsubTmpDir}" />
		</antcall>

		<property name="groovyScript.CreateVarSub" location="resources/vs/CreateVarSub.groovy" />
		<log msg="Calling '${groovyScript.CreateVarSub}' to create varsub file" />
		<groovy src="${groovyScript.CreateVarSub}">
			<arg line="-a '${projectAutomatorDefinition}'" />
			<arg line="-p ${projectName}" />
			<arg line="-t ${teva.targetEnv}" />
			<arg line="-vs '${varsubDir}'" />
			<arg line="-o '${varsubTmpDir}'" />
		</groovy>

	</target>
</project>
